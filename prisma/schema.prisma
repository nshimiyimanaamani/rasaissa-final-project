// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id             String     @id @default(auto()) @map("_id") @db.ObjectId
  name           String?
  email          String?    @unique
  emailVerified  DateTime?
  image          String?
  hashedPassword String?
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  role           UserRole[]

  conversationIds String[]       @db.ObjectId
  conversations   Conversation[] @relation(fields: [conversationIds], references: [id])

  seenMessageIds String[]  @db.ObjectId
  seenMessages   Message[] @relation("Seen", fields: [seenMessageIds], references: [id])

  accounts Account[]
  messages Message[]
  Student  Student?
  quizResults QuizResult[] // Remove the fields and references arguments here
  studentAssignments Assigned[] @relation("StudentAssignments")
  mentorAssignments  Assigned[] @relation("MentorAssignments")
}

model Student {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  grade  String?
  userId String  @unique @db.ObjectId
  user   User    @relation(fields: [userId], references: [id])
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Conversation {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt     DateTime @default(now())
  lastMessageAt DateTime @default(now())
  name          String?
  isGroup       Boolean?

  messagesIds String[]  @db.ObjectId
  messages    Message[]

  userIds String[] @db.ObjectId
  users   User[]   @relation(fields: [userIds], references: [id])
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  body      String?
  image     String?
  createdAt DateTime @default(now())

  seenIds String[] @db.ObjectId
  seen    User[]   @relation("Seen", fields: [seenIds], references: [id])

  conversationId String       @db.ObjectId
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  senderId String @db.ObjectId
  sender   User   @relation(fields: [senderId], references: [id], onDelete: Cascade)
}

model Assigned {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  studentId  String  @db.ObjectId
  mentorId   String  @db.ObjectId
  createdAt  DateTime @default(now())

    student   User    @relation("StudentAssignments", fields: [studentId], references: [id])
  mentor    User    @relation("MentorAssignments", fields: [mentorId], references: [id])
}


model Quiz {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  title        String
  description  String?
  questions    Question[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  quizResults  QuizResult[]
}



model Question {
  id           String  @id @default(auto()) @map("_id") @db.ObjectId
  text         String
  options      Option[]
  quiz         Quiz    @relation(fields: [quizId], references: [id])
  quizId       String  @db.ObjectId
}

model Option {
  id         String  @id @default(auto()) @map("_id") @db.ObjectId
  text       String
  isCorrect  Boolean  @default(false) // Add this field
  question   Question @relation(fields: [questionId], references: [id])
  questionId String   @db.ObjectId
}

// ... (previous schema)

model QuizResult {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @db.ObjectId
  quiz       Quiz     @relation(fields: [quizId], references: [id])
  quizId     String   @db.ObjectId
  score      Int
  createdAt  DateTime @default(now())
}

// ... (rest of the schema)



enum UserRole {
  STUDENT
  ADMIN
  MENTOR
}
